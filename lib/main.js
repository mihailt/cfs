// Generated by CoffeeScript 1.6.1
(function() {
  var canvas, category, config, ctx, fps, gui, lastUpdate, mouse, render, run;

  canvas = document.createElement('canvas');

  ctx = canvas.getContext("2d");

  canvas.width = document.width;

  canvas.height = document.height;

  document.body.appendChild(canvas);

  ctx.fillStyle = '#000';

  ctx.fillRect(0, 0, canvas.width, canvas.height);

  mouse = {
    pX: 0,
    pY: 0,
    x: 0,
    y: 0,
    down: false
  };

  canvas.addEventListener('mousemove', function(event) {
    mouse.pX = mouse.x || event.clientX;
    mouse.pY = mouse.y || event.clientY;
    mouse.x = event.clientX;
    return mouse.y = event.clientY;
  });

  canvas.addEventListener('mousedown', function(event) {
    return mouse.down = true;
  });

  canvas.addEventListener('mouseup', function(event) {
    return mouse.down = false;
  });

  config = {
    strokeStyle: "#fff",
    firstFillStyle: "#fff",
    secondFillStyle: "#000",
    radius: 64,
    save: function() {
      return Canvas2Image.saveAsPNG(canvas);
    }
  };

  gui = new dat.GUI();

  category = gui.addFolder('Config');

  category.addColor(config, 'strokeStyle');

  category.addColor(config, 'firstFillStyle');

  category.addColor(config, 'secondFillStyle');

  category.open();

  gui.add(config, 'save');

  lastUpdate = Date.now();

  fps = 60;

  run = function() {
    var dt, now;
    now = Date.now();
    dt = now - lastUpdate;
    if (dt >= (1000 / fps)) {
      lastUpdate = now - dt % (1000 / fps);
      render();
    }
    return requestAnimationFrame(run);
  };

  render = function() {
    var radius;
    radius = Math.abs(mouse.x - mouse.pX) + Math.abs(mouse.y - mouse.pY);
    ctx.beginPath();
    ctx.arc(mouse.x || canvas.width / 2, mouse.y || canvas.height / 2, radius * 1.4, 0, 2 * Math.PI, false);
    ctx.fillStyle = config.secondFillStyle;
    ctx.fill();
    ctx.strokeStyle = config.strokeStyle;
    ctx.stroke();
    ctx.closePath();
    ctx.beginPath();
    ctx.arc(mouse.x || canvas.width / 2, mouse.y || canvas.height / 2, radius, 0, 2 * Math.PI, false);
    ctx.fillStyle = config.firstFillStyle;
    ctx.fill();
    return ctx.closePath();
  };

  run();

}).call(this);
