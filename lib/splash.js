// Generated by CoffeeScript 1.6.1
(function() {
  var App, Keyboard, Mouse, Splash,
    _this = this;

  (function() {
    var browserRaf, canceled, targetTime, vendor, w, _i, _len, _ref;
    w = window;
    _ref = ['ms', 'moz', 'webkit', 'o'];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      vendor = _ref[_i];
      if (w.requestAnimationFrame) {
        break;
      }
      w.requestAnimationFrame = w["" + vendor + "RequestAnimationFrame"];
      w.cancelAnimationFrame = w["" + vendor + "CancelAnimationFrame"] || w["" + vendor + "CancelRequestAnimationFrame"];
    }
    if (w.requestAnimationFrame) {
      if (w.cancelAnimationFrame) {
        return;
      }
      browserRaf = w.requestAnimationFrame;
      canceled = {};
      w.requestAnimationFrame = function(callback) {
        var id;
        return id = browserRaf(function(time) {
          if (id in canceled) {
            return delete canceled[id];
          } else {
            return callback(time);
          }
        });
      };
      return w.cancelAnimationFrame = function(id) {
        return canceled[id] = true;
      };
    } else {
      targetTime = 0;
      w.requestAnimationFrame = function(callback) {
        var currentTime;
        targetTime = Math.max(targetTime + 16, currentTime = +(new Date));
        return w.setTimeout((function() {
          return callback(+(new Date));
        }), targetTime - currentTime);
      };
      return w.cancelAnimationFrame = function(id) {
        return clearTimeout(id);
      };
    }
  })();

  Keyboard = (function() {

    function Keyboard() {
      var e, k, v, _i, _len, _ref, _ref1,
        _this = this;
      this.handler = function(event) {
        return Keyboard.prototype.handler.apply(_this, arguments);
      };
      this.pressed = {};
      this.released = {};
      this.map = {
        8: 'backspace',
        9: 'tab',
        13: 'enter',
        16: 'shift',
        27: 'escape',
        32: 'space',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down'
      };
      _ref = this.map;
      for (k in _ref) {
        v = _ref[k];
        this.pressed[k] = this.pressed[v] = this.released[k] = this.released[v] = false;
      }
      _ref1 = ['keyup', 'keydown'];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        document.addEventListener(e, this.handler, false);
      }
    }

    Keyboard.prototype.name = function(code) {
      return this.map[code] || String.fromCharCode(code);
    };

    Keyboard.prototype.handler = function(event) {
      var code, key;
      code = event.keyCode;
      key = this.name(code);
      this.pressed[code] = this.pressed[key] = event.type === 'keydown';
      return this.released[code] = this.released[key] = event.type === 'keyup';
    };

    Keyboard.prototype.clear = function() {
      return this.released = {};
    };

    return Keyboard;

  })();

  Mouse = (function() {

    function Mouse(element) {
      var b, e, _i, _j, _len, _len1, _ref, _ref1,
        _this = this;
      this.element = element;
      this.handler = function(event) {
        return Mouse.prototype.handler.apply(_this, arguments);
      };
      this.x = this.y = this.px = this.py = 0;
      this.pressed = {};
      this.released = {};
      _ref = ['left', 'middle', 'right'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        b = _ref[_i];
        this.pressed[b] = this.released[b] = false;
      }
      this.map = {
        0: 'left',
        1: 'middle',
        2: 'right'
      };
      _ref1 = ['mousemove', 'mousedown', 'mouseup', 'contextmenu'];
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        e = _ref1[_j];
        this.element.addEventListener(e, this.handler, false);
      }
    }

    Mouse.prototype.name = function(code) {
      return this.map[code];
    };

    Mouse.prototype.handler = function(event) {
      var bounds, code, key, tmpx, tmpy, _ref;
      event.preventDefault();
      event.stopPropagation();
      tmpx = this.x;
      tmpy = this.y;
      bounds = this.element.getBoundingClientRect();
      this.x = event.pageX - bounds.left - window.scrollX;
      this.y = event.pageY - bounds.top - window.scrollY;
      this.px = tmpx || this.x;
      this.py = tmpy || this.y;
      if ((_ref = event.type) === 'mousedown' || _ref === 'mouseup') {
        code = event.button;
        key = this.name(code);
        this.pressed[code] = this.pressed[key] = event.type === 'mousedown';
        return this.released[code] = this.released[key] = event.type === 'mouseup';
      }
    };

    Mouse.prototype.clear = function() {
      return this.released = {};
    };

    return Mouse;

  })();

  App = (function() {

    function App(id, width, height) {
      var _this = this;
      this.id = id;
      this.width = width;
      this.height = height;
      this.tick = function() {
        return App.prototype.tick.apply(_this, arguments);
      };
      this.elapsed = 0;
      this.lastTick = 0;
      this.running = false;
      this.worker = null;
      this.canvas = document.getElementById(this.id);
      if (!this.canvas) {
        this.canvas = document.createElement('canvas');
        document.body.appendChild(this.canvas);
      }
      this.ctx = this.canvas.getContext('2d');
      this.canvas.setAttribute('id', this.id);
      this.canvas.width = this.width;
      this.canvas.height = this.height;
      this.mouse = new Mouse(this.canvas);
      this.keyboard = new Keyboard();
    }

    App.prototype.update = function(dt) {};

    App.prototype.draw = function(dt) {};

    App.prototype.run = function() {
      var step,
        _this = this;
      if (!this.running) {
        this.lastTick = Date.now();
        step = function() {
          _this.tick();
          return _this.worker = requestAnimationFrame(step);
        };
        return this.worker = requestAnimationFrame(step);
      }
    };

    App.prototype.stop = function() {
      if (this.worker) {
        cancelAnimationFrame(this.worker);
      }
      this.worker = null;
      return this.running = false;
    };

    App.prototype.tick = function() {
      var dt, now;
      now = Date.now();
      dt = (now - this.lastTick) / 1000;
      this.lastTick = now;
      this.elapsed += dt;
      this.update(dt);
      this.draw(dt);
      this.mouse.clear();
      return this.keyboard.clear();
    };

    return App;

  })();

  Splash = this.Splash = {};

  Splash.VERSION = '0.1';

  Splash.App = App;

}).call(this);
